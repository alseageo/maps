<%
  const layers = locals.layers.filter(lyr => !['heatmap', 'hillshade'].includes(lyr.name));
//   console.log('first layer is', JSON.stringify(layers[0], undefined, 4))
-%>
/* eslint-disable */
// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED

<%_ for (let layer of layers) { _%>
import <%- pascelCase(layer.name) _%>Layer from '../components/<%- pascelCase(layer.name) _%>Layer'
<%_ } _%>

const styleSpec = require('mapbox-gl/dist/style-spec')
const { createExpression } = styleSpec.expression
const { isFunction, convertFunction } = styleSpec.function
const validate = styleSpec.validate
const spec = styleSpec.v8

function migrate(style) {
  const migrated = clone(style)
  migrated.layers = style.layers.map(migrateLayer)
  return migrated
}

function migrateLayer(layer) {
  const migratedLayer = clone(layer)
  const layerType = (layer.ref ? style.layers.find(l => l.id === layer.ref) : layer).type
  if (layer.paint) {
    migratedLayer.paint = migrateProperties(layer, 'paint', layerType)
  }
  if (layer.layout) {
    migratedLayer.layout = migrateProperties(layer, 'layout', layerType)
  }
  return migratedLayer
}

function migrateProperties(layer, paintOrLayout, layerType) {
  const properties = clone(layer[paintOrLayout])
  for (const key in properties) {
    if (isFunction(properties[key])) {
      const propertySpec = spec[`${paintOrLayout}_${layerType}`][key]
      properties[key] = convertFunction(properties[key], propertySpec)
    }
  }
  return properties
}

function clone(src) {
  return Object.assign({}, src)
}


function stripUndefined(obj) {
  for (const key in obj) {
    if (obj[key] === undefined) {
      delete obj[key]
    }
  }
  return obj
}

export default function MapboxLayerComponentFromStyleJSON({ layer, aboveLayerID, belowLayerID, layerIndex }) {
  // Flatten layout and paint property objects into parent
  layer.layout = layer.layout || {}
  layer.paint = layer.paint || {}
  const { layout, paint, ...otherProperties } = migrateLayer(layer)
  const layerProps = { ...layout, ...paint, ...otherProperties }

  const commonProps = stripUndefined({
    id: layerProps.id,
    sourceID: layerProps.source,
    minZoomLevel: layerProps.minzoom,
    maxZoomLevel: layerProps.maxzoom,
    aboveLayerID: aboveLayerID,
    belowLayerID: belowLayerID,
    layerIndex: layerIndex,
    filter: layerProps.filter,
    sourceLayerID: layerProps['source-layer'],
  });

  <%_ for (let layer of layers) { _%>
  if (layer.type === '<%- layer.name _%>') {
    const style = stripUndefined({
      <%_ for (let prop of layer.properties) { _%>
      <%= prop.name %>: layerProps['<%- kebabCase(prop.name) %>'],
      <%_ } _%>
    })
    return (
      <<%- pascelCase(layer.name) _%>Layer
        {...commonProps}
        style={style}
      />
    )
  }
  <%_ } _%>
  return null;
}