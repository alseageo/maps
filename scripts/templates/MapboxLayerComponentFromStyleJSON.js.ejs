<%
  const layers = locals.layers.filter(lyr => !['heatmap', 'hillshade'].includes(lyr.name));
-%>
/* eslint-disable */
// DO NOT MODIFY
// THIS FILE IS AUTOGENERATED

<%_ for (let layer of layers) { _%>
import <%- pascelCase(layer.name) _%>Layer from '../components/<%- pascelCase(layer.name) _%>Layer'
<%_ } _%>

function stripUndefined(obj) {
  for (const key in obj) {
    if (obj[key] === undefined) {
      delete obj[key]
    }
  }
  return obj
}

export default function MapboxLayerComponentFromStyleJSON({ layer, aboveLayerID, belowLayerID, layerIndex }) {
  // Flatten layout and paint property objects into parent
  layer.layout = layer.layout || {}
  layer.paint = layer.paint || {}
  const { layout, paint, ...otherProperties } = layer
  const layerProps = { ...layout, ...paint, ...otherProperties }

  const commonProps = stripUndefined({
    key: layerProps.id,
    id: layerProps.id,
    sourceID: layerProps.source,
    minZoomLevel: layerProps.minzoom,
    maxZoomLevel: layerProps.maxzoom,
    aboveLayerID: aboveLayerID,
    belowLayerID: belowLayerID,
    layerIndex: layerIndex,
    filter: layerProps.filter,
    sourceLayerID: layerProps['source-layer'],
  });

  <%_ for (let layer of layers) { _%>
  if (layer.type === '<%- layer.name _%>') {
    const style = stripUndefined({
      <%_ for (let prop of layer.properties) { _%>
      <%= prop.name %>: layerProps['<%- kebabCase(prop.name) %>'],
      <%_ } _%>
    })
    return (
      <<%- pascelCase(layer.name) _%>Layer
        {...commonProps}
        style={style}
      />
    )
  }
  <%_ } _%>
  return null;
}